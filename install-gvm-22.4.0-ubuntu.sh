#!/usr/bin/env bash
##################################################################################
# Script to install Greenbone/OpenVAS 22.4.0
# For Ubuntu / Debian / Raspian
# David Harrop (adapted from yu210148's gvm_install)
# July 2022
###################################################################################

# Colors to use for output
YELLOW='\033[1;33m'
BLUE='\033[1;34m'
RED='\033[1;31m'
GREEN='\033[1;32m'
CYAN='\033[1;36m'
PURPLE='\033[1;35m' 
NC='\033[0m' # No Color

clear

# Being root is mandatory
if [ "$EUID" -ne 0 ]
  then echo "Please run as root"
  exit
fi

# Set some initial values 
UFW=false
API=false
gvm_home_dir="$cat /etc/passwd | grep gvm | cut -f6 -d:"
gvm_shell="$cat /etc/passwd | grep gvm | cut -f7 -d:"

echo -e ${CYAN}

# Script funtions and options
print_help () {
    printf "${BLUE}options:\n"
    printf "    -v | --version -- supported versions are 21|22\n"
    printf "    -a | --api  -- Install and configure gsa api\n"
    printf "    -u | --ufw  -- enable ufw and open ports 22,443\n"
    printf "    -h | --help -- displays this\n"

    printf "\nexamples:\n"
    printf "    ${0} -v 21\n"
echo -e ${NC}
    exit 1
}

# Handle script parameters 
POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"

    case $key in
        -v|--version)
        GVMVERSION="$2"
        shift # past argument
        shift # past value
        ;;
        -a|--api)
        API=true
        shift # past value
        ;;
        -u|--ufw)
        UFW=true
        shift # past value
        ;;
        -h|--help)
        print_help
        shift # past value
        ;;
        *)    # unknown option
        POSITIONAL+=("$1") # save it in an array for later
        shift # past argument
        ;;
    esac
done


# Validate script input 
if [[ -z "${GVMVERSION}" ]]
then
  printf "you must provide a version number to install\n"
  print_help
fi

if [[ $GVMVERSION = "21" ]] || [[ $GVMVERSION = "22" ]]; then
    echo "Okay, installing version $GVMVERSION"
else 
    echo "Sorry, invalid script input $GVMVERSION."
    echo "Please re-run this script with an applicable version number and options.${NC}"
    exit 1
fi

# Ask for the desired server hostname
while true
do
	echo -e "${GREEN}"
	echo   	"** Create DNS entries for this host before proceeding! **"
	echo
	read -p "Enter Linux operating system HOSTNAME e.g. server1: " hname
	echo    
	echo
	break
	echo
done 


# Change server hostname to new entered value and update hosts file
sudo hostnamectl set-hostname $hname
sudo sed -i '/127.0.1.1/d' /etc/hosts
echo -e "Changing system hostname and adjusting the /etc/hosts entry to:"
echo '127.0.1.1       '${hname}'' | sudo tee -a /etc/hosts
echo 
sudo systemctl restart systemd-hostnamed

# Ask for email domain  
while true
do
	echo
	echo   
	read -p "Enter email domain e.g. example.com : " emaildomain
	echo 	
    break
    echo
done

# Ask for test email address  
while true
do
	echo
	echo 	"Your email system must accept relay from this server's IP!"
	echo    "Consult your documentation for enabling a Postfix relay with"  
	echo	"your particular email platform. Authenticated relay with TLS" 
	echo	"is preferable."  
	echo
	read -p "Enter test email address to confirm mail relay ok - check spam folders ) : " email
	echo 	
    break
    echo -e "${NC}"
done

# Stop annoying service restart popups on Ubuntu 22.04. Restart services automatically with defaults
source /etc/os-release
if [[ $VERSION_CODENAME = "jammy" ]] || [[ $VERSION_CODENAME == "Something Else" ]]; then
sed -i 's/#$nrconf{kernelhints} = -1;/$nrconf{kernelhints} = 0;/' /etc/needrestart/needrestart.conf
NEEDRESTART_MODE=a
export NEEDRESTART_MODE=a
fi

# Ubdate Ubuntu & install GVM recommended basic dependencies
apt-get update
apt-get install build-essential curl cmake pkg-config python3 python3-pip gnupg --no-install-recommends --assume-yes
#old script dependencies
apt-get install gcc g++ make bison flex libksba-dev curl redis libpcap-dev cmake git pkg-config libglib2.0-dev libgpgme-dev libgnutls28-dev uuid-dev libssh-gcrypt-dev libldap2-dev gnutls-bin libmicrohttpd-dev libhiredis-dev zlib1g-dev libxml2 libxml2-dev libradcli-dev clang-format libldap2-dev doxygen nmap gcc-mingw-w64 xml-twig-tools libical-dev perl-base heimdal-dev libpopt-dev libsnmp-dev python3-setuptools python3-paramiko python3-lxml python3-defusedxml python3-dev gettext python3-polib xmltoman python3-pip texlive-fonts-recommended xsltproc texlive-latex-extra rsync ufw ntp libunistring-dev git libnet1-dev graphviz graphviz-dev libxslt1-dev --no-install-recommends -y
curl -sS https://dl.yarnpkg.com/debian/pubkey.gpg | apt-key add -
echo "deb https://dl.yarnpkg.com/debian/ stable main" | tee /etc/apt/sources.list.d/yarn.list
apt-get update
apt-get -y install yarn

# Add postfix relay and update postfix config 
debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
debconf-set-selections <<< "postfix postfix/mailname string "$emaildomain""
apt-get install --assume-yes postfix
apt-get install mailutils -y
sed -i 's/inet_interfaces = all/inet_interfaces = loopback-only/g' /etc/postfix/main.cf
systemctl restart postfix
echo 
echo "test message body from GVM installer" | mail -s "test from GVM installer" $email

# PostgreSQL
apt-get install postgresql postgresql-client postgresql-contrib postgresql-server-dev-all -y

# Upgrade everything
apt-get upgrade -y 

# Set up postgresql
systemctl restart postgresql
# sleep for a minute to let postgres restart before proceeding
echo "Sleeping for a minute to let postgres restart."
sleep 10
sudo -Hiu postgres createuser gvm
sudo -Hiu postgres createdb -O gvm gvmd
sudo -Hiu postgres psql -c 'create role dba with superuser noinherit;' gvmd
sudo -Hiu postgres psql -c 'grant dba to gvm;' gvmd
sudo -Hiu postgres psql -c 'create extension "uuid-ossp";' gvmd
sudo -Hiu postgres psql -c 'create extension "pgcrypto";' gvmd
systemctl restart postgresql
systemctl enable postgresql

sed -i 's/\"$/\:\/opt\/gvm\/bin\:\/opt\/gvm\/sbin\:\/opt\/gvm\/\.local\/bin\"/g' /etc/environment
echo "/opt/gvm/lib" > /etc/ld.so.conf.d/gvm.conf

# Address Ubuntu issue 
/usr/bin/yarn install
/usr/bin/yarn upgrade

# Create the GVM user
useradd -r -d /opt/gvm -c "GVM (OpenVAS) User" -s /bin/bash gvm

# Confirm the gvm user has the correct home directory set.
if ! [ "$gvm_home_dir" = "/opt/gvm" ]
then
    usermod -d /opt/gvm gvm
fi

# Check if gvm user has the correct shell set.
# This issue has been seen in AWS Ec2 instances. Issue #74
if ! [ "$gvm_shell" = "/bin/bash" ]
then
    usermod -s /bin/bash gvm
fi

# Time to download source files
if [ $GVMVERSION = "21" ]; then

    touch 21.txt
	export GVM_VERSION=21.4.5
	export GVM_LIBS_VERSION=21.4.4
    export GVMD_VERSION=21.4.5
    export GSA_VERSION=21.4.4
    export OPENVAS_SMB_VERSION=21.4.0
    export OPENVAS_SCANNER_VERSION=21.4.4
    export OSPD_VERSION=21.4.4
    export OSPD_OPENVAS_VERSION=21.4.4
    export GSAD_VERSION=21.4.4
	
elif [ $GVMVERSION = "22" ]; then

    touch 22.txt
	export GVM_VERSION=22.4.0
    export GVM_LIBS_VERSION=22.4.0
	export GVMD_VERSION=22.4.0
	export GSA_VERSION=22.4.0
	export OPENVAS_SMB_VERSION=22.4.0
	export OPENVAS_SCANNER_VERSION=22.4.0
	export OSPD_VERSION=21.4.4
	export OSPD_OPENVAS_VERSION=22.4.0
	export GSAD_VERSION=22.4.0

fi

mkdir /opt/gvm
chown gvm:gvm /opt/gvm
sudo -Hiu gvm mkdir /tmp/gvm-source
cd /tmp/gvm-source

	sudo -Hiu gvm curl -f -L https://github.com/greenbone/gvm-libs/archive/refs/tags/v$GVM_LIBS_VERSION.tar.gz -o gvm-libs-$GVM_LIBS_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf gvm-libs-$GVM_LIBS_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/gvmd/archive/refs/tags/v$GVMD_VERSION.tar.gz -o gvmd-$GVMD_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf gvmd-$GVMD_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/gsa/archive/refs/tags/v$GSA_VERSION.tar.gz -o gsa-$GSA_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf gsa-$GSA_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/gsad/archive/refs/tags/v$GSAD_VERSION.tar.gz -o gsad-$GSAD_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf gsad-$GSAD_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/openvas-smb/archive/refs/tags/v$OPENVAS_SMB_VERSION.tar.gz -o openvas-smb-$OPENVAS_SMB_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf openvas-smb-$OPENVAS_SMB_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/openvas-scanner/archive/refs/tags/v$OPENVAS_SCANNER_VERSION.tar.gz -o openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf openvas-scanner-$OPENVAS_SCANNER_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/ospd/archive/refs/tags/v$OSPD_VERSION.tar.gz -o ospd-$OSPD_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf ospd-$OSPD_VERSION.tar.gz
    sudo -Hiu gvm curl -f -L https://github.com/greenbone/ospd-openvas/archive/refs/tags/v$OSPD_OPENVAS_VERSION.tar.gz -o ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz
    sudo -Hiu gvm tar zxvf ospd-openvas-$OSPD_OPENVAS_VERSION.tar.gz
	
sudo -Hiu gvm cp --recursive /opt/gvm/* /tmp/gvm-source/


# Using .bashrc because it automatically
# executes when switching to the gvm user.
sudo -Hiu gvm touch /opt/gvm/.bashrc
sudo -Hiu gvm mv /opt/gvm/.bashrc /opt/gvm/.bashrc.bak # save original bashrc file 
sudo -Hiu gvm touch /opt/gvm/.bashrc
sudo -Hiu gvm echo "export PKG_CONFIG_PATH=/opt/gvm/lib/pkgconfig:$PKG_CONFIG_PATH" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc

# Build and Install GVM Libraries
sudo -Hiu gvm echo "cd /opt/gvm/gvm-libs-$GVM_LIBS_VERSION" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "mkdir build" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "cd build" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc

sudo -Hiu gvm echo "cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm -DCMAKE_BUILD_TYPE=Release -DSYSCONFDIR=/opt/gvm/etc -DLOCALSTATEDIR=/opt/gvm/var -DGVM_RUN_DIR=/opt/gvm/run/gvm" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc

sudo -Hiu gvm echo "make" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "make install" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc

# Build and Install OpenVAS and OpenVAS SMB
sudo -Hiu gvm echo "cd ../../openvas-smb-$OPENVAS_SMB_VERSION/" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "mkdir build" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "cd build" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm -DCMAKE_BUILD_TYPE=Release" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "make" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "make install" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "cd ../../openvas-scanner-$OPENVAS_SCANNER_VERSION" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "mkdir build" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "cd build" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "cmake .. -DCMAKE_INSTALL_PREFIX=/opt/gvm -DCMAKE_BUILD_TYPE=Release -DSYSCONFDIR=/opt/gvm/etc -DLOCALSTATEDIR=/opt/gvm/var -DOPENVAS_FEED_LOCK_PATH=/opt/gvm/var/lib/openvas/feed-update.lock -DOPENVAS_RUN_DIR=/opt/gvm/run/ospd" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "make" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
sudo -Hiu gvm echo "make install" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc

# Leave gvm environment and clean up
sudo -Hiu gvm echo "exit" | sudo -Hiu gvm tee -a /opt/gvm/.bashrc
su gvm
sudo -Hiu gvm rm /opt/gvm/.bashrc
sudo -Hiu gvm mv /opt/gvm/.bashrc.bak /opt/gvm/.bashrc



other junk
##@@## Need to downgrade PostgreSQL with Ubuntu 22.04 and GVM 21.4.5
source /etc/os-release
if [[ $VERSION_CODENAME = "jammy" ]] || [[ $VERSION_CODENAME == "Something Else" ]]; then
# For Ubuntu 22.04 we need to downgrade to Postgresql 13
curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg
echo "deb http://apt.postgresql.org/pub/repos/apt/ `lsb_release -cs`-pgdg main" |sudo tee  /etc/apt/sources.list.d/pgdg.list
apt-get update
apt-get -y install postgresql-13 postgresql-client-13 postgresql-contrib-13 postgresql-server-dev-all
else
#For Ubuntu 20.04 PostgreSQL we can use the default repo packages

fi